AWSTemplateFormatVersion: 2010-09-09
Description: ${stack_name}
Parameters:
  AmiId:
    Description: The AMI ID
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: EC2 instance type
    Type: String
  GPGPassphrase:
    Type: String
    Description: gpg passphrase
    NoEcho: true
  GPGBase64Key:
    Type: String
    Description: gpg private key
    NoEcho: true
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: ${minimum_viable_instances}
        Timeout: ${stack_waitcondition_timeout}
    Properties:
      LaunchConfigurationName: !Ref InstanceLaunchConfig
      LoadBalancerNames:
        - Fn::ImportValue:
            !Sub ${vpc_id}:${application_name}-${environment}-${role}-AppElb:name
      VPCZoneIdentifier: !Split
        - ","
        - Fn::ImportValue:
            !Sub ${vpc_id}:private-subnet:ids
      MaxSize: ${maximum_instances}
      MinSize: ${minimum_instances}
      HealthCheckType: ELB
      HealthCheckGracePeriod: 720
      TerminationPolicies:
      - OldestInstance
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: true
  InstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500 # Selected for the baseline performance of 1,500 IOPS
            VolumeType: gp2
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub ${vpc_id}:${application_name}-${environment}-${role}-InstanceRoleProfile:name
      KeyName: ${key_name}
      ImageId:
        Ref: AmiId
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Fn::ImportValue:
            !Sub ${vpc_id}:${base_name}-${environment}-${role}-${base_app_securitygroup_name}:id
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Temporarily override the default umask of 0077
          umask 0022

          # Set the default region for the AWS CLI/SDK
          echo export AWS_DEFAULT_REGION=${AWS::Region} > /etc/profile.d/aws_default_region.sh && . /etc/profile.d/aws_default_region.sh

          mkdir -p /tmp/deploy
          cd /tmp/deploy

          ###### Local debugging support ######
          skip_gpg_and_boxset_download=${local}
          if $skip_gpg_and_boxset_download;
          then
              # Return success
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName}
          else
            ###### Download artifacts out of s3 ######s
            aws s3 cp s3://artifacts-${AWS::AccountId}-${AWS::Region}/${application_name}/${environment}/${AWS::StackName}.zip.gpg ${AWS::StackName}.zip.gpg

            # Decrypt the boxset
            echo '${GPGBase64Key}' | base64 -d > /dev/shm/privkey.gpg
            gpg --import /dev/shm/privkey.gpg
            gpg --always-trust --batch --passphrase '${GPGPassphrase}' --decrypt --output ${AWS::StackName}.zip ${AWS::StackName}.zip.gpg

            if [ $? -ne 0 ]; then
              # Unrecoverable error, so fail fast
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName} --success false
            fi

            unzip -o ${AWS::StackName}.zip -d boxset
            mv boxset/*cookbooks*.zip cookbooks.zip
            mv boxset/*dream**.jar data-services.jar

            ###### Run Chef ######
            mkdir -p /var/log/chef
            unzip -o cookbooks.zip -d cookbooks

            cd cookbooks
            ls config/solo.rb
            ls nodes/${chef_node}.json

            chef-solo -c config/solo.rb -j nodes/${chef_node}.json -l debug --force-logger

            if [ $? -eq 0 ]; then
              # All done!
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName}
            else
              # Deploy failed upload logs and die
              INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`
              curl -s http://169.254.169.254/latest/user-data > /var/log/user-data.log

              for log in /var/log/chef/chef.log /var/log/userdata.log /var/log/boot.log /var/log/cloud-init-output.log /app/nginx/logs/access.log /app/nginx/logs/error.log /app/java_service/dream-data-services/logs/dream-data-services-8080.log; do
                [ -f $log ] && aws s3 cp --acl bucket-owner-full-control $log s3://logs-${AWS::AccountId}-${AWS::Region}/failed_deploys/${AWS::StackName}/$INSTANCE_ID/`basename $log`
              done
              shutdown -h now
            fi
          fi
Outputs:
  InstanceAutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Description: App instance ID
