AWSTemplateFormatVersion: 2010-09-09

Description: craft-web-env-shell

#Parameters:

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /

  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AppRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource: !Sub arn:aws:s3:::${AWS::AccountId}-${AWS::Region}-artifacts/*
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource: !Sub arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:PutObjectAcl
          Resource: !Sub arn:aws:s3:::flask-west2-prod-west2-logs/failed_deploys/*
      Roles:
      - Ref: InstanceRole

  InstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  AppAlbRegionDnsRs:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'AppAlb.DNSName'
        HostedZoneId: !GetAtt 'AppAlb.CanonicalHostedZoneID'
      HostedZoneName: craftdemodata.com.
      Name: web-us-west-2.craftdemodata.com
      Type: A

  AppAlbTopLevelDnsRs:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt [AppAlb, DNSName]
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt [AppAlb, CanonicalHostedZoneID]
      HostedZoneName: craftdemodata.com.
      Name: www.craftdemodata.com
      SetIdentifier: craft-data-services-app-us-west-2
      Type: A
      Weight: 100 # By default, the regions are set up active-active


  DefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 443
      Protocol: HTTPS
      VpcId: vpc-bc481fc5
      TargetType: instance

  AppAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue:
            !Sub vpc-bc481fc5:craft-demo-base-app-WebServicesAlbSg:id
      # external subnets
      Subnets:
        - "subnet-2368b468"
        - "subnet-819a27f8"
        - "subnet-21e6747b"

  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref AppAlb
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:us-west-2:496911069803:certificate/e503f71e-6335-4e22-a800-d10554aa2d49
      DefaultActions:
      - TargetGroupArn: !Ref DefaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref AppAlb
      Port: 443
      Protocol: HTTPS

Outputs:
  CloudFormationUpdateHack:
    Description: Allows us to perform no-op updates on a stack by changing only this value every time.
    Value: 20180407-035251
  InstanceRoleProfileName:
    Export:
      Name: !Sub vpc-bc481fc5:craft-web-services-web-InstanceRoleProfile:name
    Value: !Ref InstanceRoleProfile
  AppAlbName:
    Export:
      Name: !Sub vpc-bc481fc5:craft-web-services-web-AppAlb:name
    Value: !Ref AppAlb
  DefaultTargetGroup:
    Export:
      Name: !Sub vpc-bc481fc5:craft-web-services-web-DefaultTargetGroup:name
    Value: !Ref DefaultTargetGroup
